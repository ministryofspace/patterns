// config/_type-breakpoints.scss
$breakpoints: (
  small:    $small-top,
  medium:   $small-top,
  large:    $medium-top,
  x-large:  $large-top
);

// config/_type-weight.scss
$type-weight: (
  thin:     200,
  light:    300,
  regular:  400,
  semi:     500,
  bold:     700
);

// config/_typography.scss
$text-sizing: (
  centi: (
    small: (
      font-size: .6875rem,
      line-height: 1.5
    ),
    // medium: (
    //   font-size: .6875rem,
    //   line-height: 1.5
    // ),
    large: (
      font-size: .6875rem,
      line-height: 1.5
    )
  ),
  deci: (
    small: (
      font-size: .625rem,
      line-height: 1.715
    ),
    // medium: (
    //   font-size: .8125rem,
    //   line-height: 1.75
    // ),
    large: (
      font-size: .79rem,
      line-height: 1.715
    )
  ),
  base: (
    small: (
      font-size: .725rem,
      line-height: 1.58
    ),
    // medium: (
    //   font-size: 1.0625rem,
    //   line-height: 1.714
    // ),
    large: (
      font-size: 1rem,
      line-height: 1.58
    )
  ),
  deca: (
    small: (
      font-size: .79rem,
      line-height: 1.5
    ),
    //   medium: (
    //   font-size: 1.25rem,
    //   line-height: 1.5
    // ),
    large: (
      font-size: 1.266rem,
      line-height: 1.5
    )
  ),
  hecto: (
    small: (
      font-size: .702rem,
      line-height: 1.5
    ),
    // medium: (
    //   font-size: 1.5rem,
    //   line-height: 1.5
    // ),
    large: (
      font-size: 1.125rem,
      line-height: 1.5
    )
  ),
  kilo: (
    small: (
      font-size: 1.125rem,
      line-height: 1.25
    ),
    // medium: (
    //   font-size: 2.675rem,
    //   line-height: 1.375
    // ),
    large: (
      font-size: 1.802rem,
      line-height: 1.45
    )
  ),
  mega: (
    small: (
      font-size: 4.11rem,
      line-height: 1.25
    ),
    // medium: (
    //   font-size: 5.5rem,
    //   line-height: 1.25
    // ),
    large: (
      font-size: 6.583rem,
      line-height: 1.5
    )
  )
);

// functions/_type-breakpoints.scss
@function breakpoint($breakpoint-name) {
  @return map-get($breakpoints, $breakpoint-name);
}

// functions/_typography.scss
@function text-breakpoints-for($text-size) {
  @return map-get($text-sizing, $text-size);
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints-map: text-breakpoints-for($text-size);
  @return map-get($text-breakpoints-map, $breakpoint-name);
}

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
  font-weight: map-get($type-weight, $weight);
}

// mixins/_type-breakpoints.scss
@mixin respond-above($breakpoint-name) {
  @media screen and (min-width: breakpoint($breakpoint-name)) {
    @content;
  }
}

// lib/mixins/_typography.scss
@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  font-size: map-get($text-size-properties, 'font-size');
  line-height: map-get($text-size-properties, 'line-height');
}

@mixin responsive-text-size($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      @include respond-above($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}